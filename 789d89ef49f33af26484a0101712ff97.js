const LEVEL_UNIT=20*Math.log10(2)/256,LEVEL_LUT=[0,5,9,13,17,20,23,25,27,29,31,33,35,37,39,41,42,43,45,46];function scaleOutLevel(e){return e>=20?28+e:LEVEL_LUT[e]}const envOutputLUT=new Float32Array(4096);for(let e=0;e<envOutputLUT.length;e++){const t=(e-3824)*LEVEL_UNIT;envOutputLUT[e]=Math.pow(20,t/20)}class Envelope{constructor(e,t){this._levels=e,this._rates=t,this._level=0,this._down=!0,this._inc=0,this._advance(0)}noteOff(){this._down=!1,this._advance(3)}get active(){return 4!==this._state}render(){return(this._state<3||this._state<4&&!this._down)&&(this._rising?(this._level+=this._inc*(2+(this._targetLevel-this._level)/256),this._level>=this._targetLevel&&(this._level=this._targetLevel,this._advance(this._state+1))):(this._level-=this._inc,this._level<=this._targetLevel&&(this._level=this._targetLevel,this._advance(this._state+1)))),envOutputLUT[Math.floor(this._level)]}_advance(e){if(this._state=e,this._state<4){const e=this._levels[this._state];this._targetLevel=Math.max(0,(scaleOutLevel(e)<<5)-224),this._rising=this._targetLevel-this._level>0;const t=Math.min(63,41*this._rates[this._state]>>6);this._inc=Math.pow(2,t/4)/2048,this._inc*=44100/sampleRate}}}const VELOCITY_DATA=[0,70,86,97,106,114,121,126,132,138,142,148,152,156,160,163,166,170,173,174,178,181,184,186,189,190,194,196,198,200,202,205,206,209,211,214,216,218,220,222,224,225,227,229,230,232,233,235,237,238,240,241,242,243,244,246,246,248,249,250,251,252,253,254];function scaleVelocity(e,t){const s=Math.max(0,Math.min(127,e));return t*(VELOCITY_DATA[s>>1]-239)+7>>3<<4}class Operator{constructor(e,t,s){this.value=0;const o=Math.PI/2*(e.pan+50)/100;this.ampL=Math.cos(o),this.ampR=Math.sin(o);let i=scaleOutLevel(e.volume)<<5;i+=scaleVelocity(s,e.velocitySens),i=Math.max(0,i);const a=LEVEL_UNIT*(i-3168);this.outputLevel=Math.pow(10,a/20),this._phase=0,this._envelope=new Envelope(e.levels,e.rates);const n=t*e.freqCoarse*Math.pow(2,e.detune/1024);this._phaseStep=2*Math.PI*n/sampleRate}noteOff(){this._envelope.noteOff()}get active(){return this._envelope.active}render(e){return this.value=Math.sin(this._phase+e)*this._envelope.render(),this._phase+=this._phaseStep,this._phase>=2*Math.PI&&(this._phase-=2*Math.PI),this.value}}const PER_VOICE_LEVEL=.125/6,MOD_MATRIX={0:1,2:3,4:5,5:5},CARRIERS=[0,2,4],PATCH={feedback:6,operators:[{rates:[96,25,25,67],levels:[99,75,0,0],detune:3,velocitySens:2,volume:99,freqCoarse:1,pan:0},{rates:[95,50,35,78],levels:[99,75,0,0],detune:0,velocitySens:7,volume:58,freqCoarse:14,pan:25},{rates:[95,20,20,50],levels:[99,95,0,0],detune:0,velocitySens:2,volume:99,freqCoarse:1,pan:-25},{rates:[95,29,20,50],levels:[99,95,0,0],detune:0,velocitySens:6,volume:89,freqCoarse:1,pan:0},{rates:[95,20,20,50],levels:[99,95,0,0],detune:-7,velocitySens:0,volume:99,freqCoarse:1,pan:25},{rates:[95,29,20,50],levels:[99,95,0,0],detune:7,velocitySens:6,volume:79,freqCoarse:1,pan:-25}]},feedbackRatio=Math.pow(2,PATCH.feedback-7);class Voice{constructor(e,t){this.note=e,this.down=!0;const s=440*Math.pow(2,(e-69)/12);this._operators=PATCH.operators.map((e=>new Operator(e,s,t)))}noteOff(){for(const e of this._operators)e.noteOff()}get active(){for(const e of CARRIERS)if(this._operators[e].active)return!0;return!1}render(){for(let e=this._operators.length-1;e>=0;--e){let t=0;if(e in MOD_MATRIX){const s=MOD_MATRIX[e],o=this._operators[s];t=o.value*(e===s?feedbackRatio:o.outputLevel)}this._operators[e].render(t)}const e=[0,0];for(const t of CARRIERS){const s=this._operators[t],o=s.value*s.outputLevel;e[0]+=o*s.ampL,e[1]+=o*s.ampR}return e[0]*=PER_VOICE_LEVEL/CARRIERS.length,e[1]*=PER_VOICE_LEVEL/CARRIERS.length,e}}class Processor extends AudioWorkletProcessor{constructor(){super(),this._voices=[],this._poly=8,this._sustain=!1,this.port.onmessage=e=>{const{data:t}=e;switch(t.type){case"voices":for(this._poly=t.voices;this._voices.length>this._poly;)this._voices.shift();break;case"noteOn":for(this._voices.push(new Voice(t.note,t.velocity));this._voices.length>this._poly;)this._voices.shift();break;case"noteOff":this._voices.forEach((e=>{e.note===t.note&&e.down&&(e.down=!1,this._sustain||e.noteOff())}));break;case"sustain":this._sustain=t.down,t.down||this._voices.forEach((e=>{e.down||e.noteOff()}))}}}process(e,t){const s=t[0][0],o=t[0][1];for(let e=0;e<s.length;++e){const[t,i]=this._voices.reduce(((e,t)=>{const s=t.render();return e[0]+=s[0],e[1]+=s[1],e}),[0,0]);s[e]=t,o[e]=i}return this._voices=this._voices.filter((e=>e.active)),!0}}registerProcessor("main",Processor);